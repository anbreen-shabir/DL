# Install necessary packages (already satisfied, but shown for completeness)
!pip install numpy pandas tensorflow scikit-learn --quiet

# Import required libraries
import numpy as np
import pandas as pd
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Embedding, SpatialDropout1D, Dense
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.datasets import imdb
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt

# Parameters
max_features = 10000
maxlen = 100  # Reduced from 150
batch_size = 64

# Load data
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

# Reduce data size
x_train = x_train[:10000]
y_train = y_train[:10000]
x_test = x_test[:5000]
y_test = y_test[:5000]

# Pad sequences
x_train = pad_sequences(x_train, maxlen=maxlen)
x_test = pad_sequences(x_test, maxlen=maxlen)

# Build model
model = Sequential()
model.add(Embedding(max_features, 64, input_shape=(maxlen,)))  # Reduced embedding dim
model.add(SpatialDropout1D(0.2))
model.add(LSTM(32, dropout=0.2, recurrent_dropout=0.2))        # Reduced LSTM units
model.add(Dense(1, activation='sigmoid'))

# Compile and train
model.compile(loss='binary_crossentropy', optimizer=Adam(), metrics=['accuracy'])
model.summary()

history = model.fit(
    x_train, y_train,
    epochs=2,
    batch_size=batch_size,
    validation_data=(x_test, y_test),
    verbose=2
)

# Evaluate
score, acc = model.evaluate(x_test, y_test, batch_size=batch_size, verbose=2)
print(f"\nTest accuracy: {acc*100:.2f}%")
print(f"Test loss: {score:.4f}")

